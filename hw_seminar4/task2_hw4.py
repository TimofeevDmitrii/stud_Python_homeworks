# В фермерском хозяйстве в Карелии выращивают чернику. Черника растет на круглой грядке, и кусты черники высажены по окружности грядки. Каждый куст черники имеет урожайность, которая соответствует количеству ягод на этом кусте.
# Урожайность черничных кустов представлена в виде списка arr, где arr[i] - это урожайность (количество ягод) i-го куста.
# В фермерском хозяйстве внедрена система автоматического сбора черники. Эта система состоит из управляющего модуля и нескольких собирающих модулей. Каждый собирающий модуль может собрать ягоды с одного куста и с двух соседних кустов. Собирающий модуль находится перед определенным кустом, и он может выбирать, с какого куста начать сбор ягод.
# Ваша задача - написать программу, которая определит максимальное число ягод, которое может собрать один собирающий модуль за один заход, находясь перед некоторым кустом грядки.

# Входные данные:
# На вход программе подается список arr, где arr[i] (1 ≤ arr[i] ≤ 1000) - урожайность i-го куста черники. Размер списка не превышает 1000 элементов.

# Выходные данные:
# Программа должна вывести одно целое число - максимальное количество ягод, которое может собрать собирающий модуль, находясь перед некоторым кустом грядки.

# Пример использования На входе:
# arr = [5, 8, 6, 4, 9, 2, 7, 3]

# На выходе:
# 19
arr = [5, 8, 6, 4, 9, 2, 7, 3]
max_sum = 0
curr_sum = 0
for i in range(len(arr)):
    if i<len(arr)-1:
        curr_sum=arr[i-1]+arr[i]+arr[i+1]
    else:
        curr_sum=arr[i-1]+arr[i]+arr[0]
    if curr_sum>max_sum:
        max_sum=curr_sum
print(max_sum)

# добавил второй вариант при просмотре семинара) додумался сам, когда Сергей начал говорить, что можно сделать все оптимально)))
arr = [5, 1, 6, 4, 9, 2, 7, 10] #отличается от иходного списка кустов с ягодами (при нахождении на последнем кусте наибольший результат будет)
max_sum = 0
max_i = 0
for i in range(len(arr)):
    curr_sum=0
    for k in range(i-1,i+2): # а что, если машина будет собирать одновременно ягоды не с трех кустов, а с m кустов? 
        curr_sum +=arr[k-(len(arr))*(k//(len(arr)))]  # цикл избавит от написания в строку m слагаемых;
        if curr_sum>max_sum:                          # долго думал, как получить нулевой элемент при i=len(arr)
            max_sum=curr_sum                          # потому что пытался сначала загнать это в условие цикла
            max_i=i
print(max_sum, max_i)


# А потом Сергей Сергеевич натолкнул на самый простой вариант))) просто начать с -2 элемента)))
arr = [5, 8, 6, 4, 9, 2, 7, 3]
max_sum = 0
for i in range(-2,len(arr)-2):
    curr_sum=arr[i-1]+arr[i]+arr[i+1]
    if curr_sum>max_sum:
        max_sum=curr_sum
print(max_sum)

# Но в итоге мысль Сергея была в другом:
arr = [5, 8, 6, 4, 9, 2, 7, 3]
max_sum = 0
for i in range(len(arr)):
    curr_sum=arr[i]+arr[i-1]+arr[i-2]
    if curr_sum>max_sum:
        max_sum=curr_sum
print(max_sum)
# Т.е. для решения этой задачи не обязательно, чтобы i был центральным элементом)))


# эталонное решение(через лист)
# arr_count = list()
# for i in range(len(arr) - 1):
#     arr_count.append(arr[i - 1] + arr[i] + arr[i + 1])
# arr_count.append(arr[-2] + arr[-1] + arr[0])

# # Вывод максимальной урожайности, которую может собрать собирающий модуль
# print(max(arr_count))

